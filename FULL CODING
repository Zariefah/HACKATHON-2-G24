#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

// Define the Item class
class Item {
private:
    
    int healthEffect;
    // Add more properties as needed

public:
	string name;
    Item(string name, int healthEffect) {
        this->name = name;
        this->healthEffect = healthEffect;
    }

    string getName() {
        return name;
    }

    int getId() {
        // Replace this with the logic to retrieve the item's ID
        // For demonstration purposes, let's assume the ID is based on the length of the name
        return name.length();
    }
};

// Define the Node class for the linked list
class Node {
public:
    Item* item;
    Node* next;

    Node(Item* item) {
        this->item = item;
        this->next = nullptr;
    }
};
// Define the Inventory class to manage the player's purchased items
class Inventory {
private:
    Node* head;

public:
    Inventory() {
        head = nullptr;
    }

    void addItem(Item* item) {
        Node* newNode = new Node(item);

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }
    }

    void removeItem(int itemIndex) {
    if (head == nullptr) {
        cout << "Inventory is empty." << endl;
        cout << "Press any key to continue" << endl;
        return;
    }

    if (itemIndex < 1) {
        cout << "Invalid item index." << endl;
        return;
    }

    if (itemIndex == 1) {
        Node* removedNode = head;
        head = head->next;
        delete removedNode->item;
        delete removedNode;
        cout << "Item removed successfully." << endl;
        return;
    }

    Node* currentNode = head;
    Node* previousNode = nullptr;
    int currentIndex = 1;

    while (currentNode != nullptr && currentIndex < itemIndex) {
        previousNode = currentNode;
        currentNode = currentNode->next;
        currentIndex++;
    }

    if (currentNode == nullptr) {
        cout << "Invalid item index." << endl;
        return;
    }

    previousNode->next = currentNode->next;
    delete currentNode->item;
    delete currentNode;
    cout << "Item removed successfully." << endl;
}


    Item* getItem(int itemIndex) {
        if (head == nullptr) {
            cout << "Inventory is empty." << endl;
            return nullptr;
        }

        if (itemIndex < 1) {
            cout << "Invalid item index." << endl;
            return nullptr;
        }

        Node* current = head;
        int currentIndex = 1;

        while (current != nullptr && currentIndex < itemIndex) {
            current = current->next;
            currentIndex++;
        }

        if (current == nullptr) {
            cout << "Invalid item index." << endl;
            return nullptr;
        }

        return current->item;
    }

    void displayItems() {
        Node* current = head;
        int itemIndex = 1;

        if (current == nullptr) {
            cout << "Inventory is empty." << endl;
            return;
        }

        cout << "Inventory:" << endl;
        while (current != nullptr) {
            cout << itemIndex << ". " << current->item->name << endl;
            current = current->next;
            itemIndex++;
        }
    }
};


// Class for monster
class Monster {
private:
    string name;
    int level;
    int health;
public:
    Monster(string name, int level, int health);
    string getName();
    void printMonsterStats();
    void decreaseHealth(int amount);
    int getHealth();
};

// Class for player
class Player {
private:
   Inventory inventory;
    string password;
    string name;
    int age;
    string role;
    int level;
    int gold;
    int strength;
    int defense;
    int health;
    int monsterDefeated;

   
public:
	string username;  
	Player(string username, string password);
	void createPlayer();
    void printWindowStatus();
    void attackMonster(Monster* monster);
    void useItem(Monster* monster);
    void retreat();
    void levelUp();
    bool checkCredentials(string username, string password);
    void playLevel1();
    void playLevel2();
    void playLevel3();
};

// Player class
Player::Player(string username, string password) {
    this->username = username;
    this->password = password;
}

void Player::createPlayer() {
    cout << "Enter your name: ";
    cin >> name;
    cout << "Enter your age: ";
    cin >> age;


    // Randomly assign a role
    string roles[] = { "Mage", "Warrior", "Priest" };
    int randomIndex = rand() % 3;
    role = roles[randomIndex];

    level = 1;
    gold = 0;
    strength = 10;
    defense = 5;
    health = 100;
    monsterDefeated = 0;
}

void Player::printWindowStatus() {
	cout << endl << "------------------" << endl;
    cout << "Window Status" << endl;
    cout << "------------------" << endl;
    cout << "Name: " << name << endl;
    cout << "Age: " << age << endl;
    cout << "Role: " << role << endl;
    cout << "Level: " << level << endl;
    cout << "Coins: " << gold << endl;
    cout << "------------------" << endl;
    cout << "Strength: " << strength << endl;
    cout << "Defense: " << defense << endl;
    cout << "Health: " << health << endl;
    cout << "------------------" << endl;
}

void Player::attackMonster(Monster* currentMonster) {
	string monsterName = currentMonster->getName();
	cout << "Player attacks the "<< monsterName << endl;

    int powerOption;

    if (role == "Mage") {
        cout << "Choose your power:" << endl;
        cout << "1. Black Magic" << endl;
        cout << "2. Illusionist's Mirage" << endl;
        cout << "3. Necrotic Hex" << endl;

        cin >> powerOption;

        switch (powerOption) {
            case 1:
                cout << "Black Magic!" << endl;
                cout << "You unleash dark magical forces that instill fear in the " << monsterName << endl;
                cout << monsterName <<"'s health decreases by 7" << endl;
                currentMonster->decreaseHealth(7);
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
                break;
            case 2:
                cout << "Illusionist's Mirage!" << endl;
                cout << "You create illusions that confuse the " << monsterName << " making it difficult for them to attack." << endl;
                cout << monsterName <<"'s health decreases by 4" << endl;
                currentMonster->decreaseHealth(4);
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
                break;
            case 3:
                cout << "Necrotic Hex!" << endl;
                cout << "You cast a powerful hex on the "<< monsterName <<", draining their life force." << endl;
                cout << monsterName <<"'s health decreases by 10" << endl;
                currentMonster->decreaseHealth(10);
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
                break;
            default:
                cout << "Invalid option. Attack failed." << endl;
                break;
        }
    }
    else if (role == "Warrior") {
        cout << "Choose your attack style:" << endl;
        cout << "1. Sword Slash" << endl;
        cout << "2. Shield Bash" << endl;
        cout << "3. Warcry" << endl;

        cin >> powerOption;

        switch (powerOption) {
            case 1:
                cout << "Sword Slash!" << endl;
                cout << "You swing your sword with immense strength, slicing through the " << monsterName << endl;
                cout << monsterName <<"'s health decreases by 6" << endl;
                currentMonster->decreaseHealth(6);
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
                break;
            case 2:
                cout << "Shield Bash!" << endl;
                cout << "You bash your shield against the " << monsterName << ", stunning them momentarily." << endl;
                cout << monsterName <<"'s health decreases by 3" << endl;
                currentMonster->decreaseHealth(3);
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
                break;
            case 3:
                cout << "Warcry!" << endl;
                cout << "You let out a powerful warcry that intimidates the " << monsterName << endl;
                cout << monsterName <<"'s health decreases by 8" << endl;
                currentMonster->decreaseHealth(8);
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
                break;
            default:
                cout << "Invalid option. Attack failed." << endl;
                break;
        }
    }
    else if (role == "Priest") {
        cout << "Choose your divine power:" << endl;
        cout << "1. Healing Touch" << endl;
        cout << "2. Divine Smite" << endl;
        cout << "3. Holy Shield" << endl;

        cin >> powerOption;

        switch (powerOption) {
            case 1:
                cout << "Healing Touch!" << endl;
                cout << "You channel divine energy to heal yourself, restoring health." << endl;
                cout << "Your health increases by 10" << endl;
                health += 10;
                break;
            case 2:
                cout << "Divine Smite!" << endl;
                cout << "You call upon the divine forces to smite the " << monsterName << " with holy power." << endl;
                cout << monsterName <<"'s health decreases by 7" << endl;
                currentMonster->decreaseHealth(7);
                break;
            case 3:
                cout << "Holy Shield!" << endl;
                cout << "You conjure a holy shield that provides defense against the " << monsterName << "'s' attacks." << endl;
                cout << "Your defense increases by 5" << endl;
                defense += 5;
                break;
            default:
                cout << "Invalid option. Attack failed." << endl;
                break;
        }
    }
    else {
        cout << "Invalid role for attacking." << endl;
    }
    
    cout<<"Monster defeated: "<< monsterDefeated << endl;
}



void Player::useItem(Monster* currentMonster) {
	string monsterName = currentMonster->getName();
    cout << "Player uses an item!" << endl;
    cout << "Choose an item from your inventory:" << endl;
	
	// Displaying purchased items
    inventory.displayItems();
    
    int itemOption;
    cin >> itemOption;
    Item* selectedItem = inventory.getItem(itemOption);

if (selectedItem != nullptr) {
    string itemName = selectedItem->getName();

    // Perform actions based on the selected item
    switch (selectedItem->getId()) {
        case 1:
            cout << "Venom Stick!" << endl;
            cout << "The " << monsterName << " feel sickened by the venomous substance." << endl;
            cout << monsterName <<"'s health decrease by 6"<<endl;
            // Decrease the monster's health
            currentMonster->decreaseHealth(6);
            
            // Check if the monster is defeated
                if (currentMonster->getHealth() <= 0) {
                    cout << "The monster is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
            break;
            
        case 2:
            cout << "Elixir of Invisibility!" << endl;
            cout << "The " << monsterName << " are unable to see you, allowing you to freely attack them." << endl;
            cout << monsterName <<"'s health decrease by 4"<<endl;
            // Decrease the monster's health
            currentMonster->decreaseHealth(4);
            
            // Check if the monster is defeated
                if (currentMonster->getHealth() <= 0) {
                    cout << "The "<< monsterName << "is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
            break;
            
        case 3:
            cout << "Scroll of Fireball!" << endl;
            cout << "The " <<monsterName << " are burned in fire." << endl;
            
            // Decrease the monster's health
            currentMonster->decreaseHealth(6);
            
            // Check if the monster is defeated
                if (currentMonster->getHealth() <= 0) {
                    cout << "The " << monsterName << " is defeated!" << endl;
                    // Update player and monster stats accordingly
                    monsterDefeated++;
                    levelUp();
                }
            break;
        // Add more cases for other item options if needed
        default:
            cout << "Invalid item option." << endl;
            break;
    }
     // Remove the used item from the inventory
        inventory.removeItem(itemOption);
        selectedItem = nullptr;
     cout << "Monster defeated: " << monsterDefeated << endl; // Print the number of goblins defeated
}
}


void Player::retreat() {
    cout << "Player retreats from the battle!" << endl;
    cout << "You escaped from the battle. No rewards gained." << endl;
    switch (level) {
        case 1:
            playLevel1();
            break;
        case 2:
            playLevel2();
            break;
        case 3:
            playLevel3();
            break;
        default:
            cout << "Invalid current level." << endl;
            break;
    }
}

void Player::levelUp() {
    level++;
    strength += 5;
    defense += 3;
    health += 20;
    gold +=1000;
}

bool Player::checkCredentials(string username, string password) {
    return (this->username == username && this->password == password);
}

void Player::playLevel1() {
//	ifstream file("Goblin.txt");
//        if (file.is_open()) { // Check if the file was successfully opened
//        string line;
//        while (getline(file, line)) { // Read each line of the file
//            cout << line << endl; // Output the line to the console
//        }
//
//        file.close(); // Close the file
//    } else {
//        cout << "Failed to open the file." << endl;
        
    cout << "You have entered Level 1: Goblin Forest" << endl;
    cout << "Select your option:" << endl;
    cout << "1. Continue" << endl;
    cout << "2. Purchase items" << endl;
    cout << "3. Exit" << endl;
	
	int choice;
    cin >> choice;
    switch (choice) {
        case 1:
            {
                cout << "Continuing to the game..." << endl;
                // Display goblin details
   				 Monster* monster = new Monster("Goblin", 1, 20);

    			while (true) {
        		printWindowStatus();
        		monster->printMonsterStats();

        		int choice;
       			 cout << "Choose an action:" << endl;
       			 cout << "1. Attack" << endl;
        		 cout << "2. Use Item" << endl;
        		 cout << "3. Retreat" << endl;
    			 cin >> choice;

        		switch (choice) {
            		case 1:
                 		attackMonster(monster);
                		if (monster->getHealth() <= 0) {
                    		cout << "You defeated the goblin! Level up!" << endl;
                    		monsterDefeated++;
                    		levelUp();
                    		return;
                		}
                		break;
            		case 2:
               	 		useItem(monster);
                		break;
            		case 3:
                		retreat();
                		return;
            		default:
                		cout << "Invalid option. Please choose again." << endl;
                		break;
        }

        		// Monster attacks player
        		int monsterDamage = rand() % 10 + 1;
        		int playerDamageTaken = monsterDamage - defense;
        		health -= playerDamageTaken;
        		cout << "The goblin attacks you! You take " << playerDamageTaken << " damage." << endl;

        		if (health <= 0) {
            		cout << "Game Over! You were defeated by the goblin." << endl;
            		return;
        }
    }
}
case 2:
    cout << "Entering the item shop..." << endl;
    cout << "Available items:" << endl;
    cout << "1. Venom Stick - Price: 100 gold" << endl;
    cout << "2. Elixir of Invisibility - Price: 200 gold" << endl;
    cout << "3. Scroll of Fireball - Price: 150 gold" << endl;
    
    cout << "Available gold: " << gold <<endl;
    // Add more item options if needed

    int itemOption;
    cin >> itemOption;

    switch (itemOption) {
        case 1: {
            int itemPrice = 100;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Venom Stick", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Venom Stick purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Venom Stick." << endl;
            }
            break;
        }
        case 2: {
            int itemPrice = 200;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Elixir of Invisibility", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Elixir of Invisibility purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Elixir of Invisibility." << endl;
            }
            break;
        }
        case 3: {
            int itemPrice = 150;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Scroll of Fireball", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Scroll of Fireball purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Scroll of Fireball." << endl;
            }
            break;
        }
        // Add more cases for other item options if needed
        default:
            cout << "Invalid item option." << endl;
            break;
    }
playLevel1();


        case 3:
            cout << "Exiting the game..." << endl;
            exit(0);
        default:
            cout << "Invalid choice. Exiting the game..." << endl;
            exit(0);
    }
}
//}
        

void Player::playLevel2() {
//	ifstream file("Zombie.txt");
//        if (file.is_open()) { // Check if the file was successfully opened
//        string line;
//        while (getline(file, line)) { // Read each line of the file
//            cout << line << endl; // Output the line to the console
//        }
//
//        file.close(); // Close the file
//    } else {
//        cout << "Failed to open the file." << endl;
        
    cout << "You have entered Level 2: Zombie Dark City" << endl;
    cout << "Select your option:" << endl;
    cout << "1. Continue" << endl;
    cout << "2. Purchase items" << endl;
    cout << "3. Exit" << endl;
	
	int choice;
    cin >> choice;
    switch (choice) {
        case 1:
            {
                cout << "Continuing to the game..." << endl;
                // Display goblin details
   				 Monster* monster = new Monster("Zombie", 1, 30);

    			while (true) {                               
        		printWindowStatus();
        		monster->printMonsterStats();

        		int choice;
       			 cout << "Choose an action:" << endl;
       			 cout << "1. Attack" << endl;
        		 cout << "2. Use Item" << endl;
        		 cout << "3. Retreat" << endl;
    			 cin >> choice;

        		switch (choice) {
            		case 1:
                 		attackMonster(monster);
                		if (monster->getHealth() <= 0) {
                    		cout << "You defeated the zombie! Level up!" << endl;
                    		monsterDefeated++;
                    		levelUp();
                    		return;
                		}
                		break;
            		case 2:
               	 		useItem(monster);
                		break;
            		case 3:
                		retreat();
                		return;
            		default:
                		cout << "Invalid option. Please choose again." << endl;
                		break;
        }

        		// Monster attacks player
        		int monsterDamage = rand() % 10 + 1;
        		int playerDamageTaken = monsterDamage - defense;
        		health -= playerDamageTaken;
        		cout << "The zombie attacks you! You take " << playerDamageTaken << " damage." << endl;

        		if (health <= 0) {
            		cout << "Game Over! You were defeated by the zombie." << endl;
            		return;
        }
    }
}
	case 2:
    cout << "Entering the item shop..." << endl;
    cout << "Available items:" << endl;
    cout << "1. Venom Stick - Price: 100 gold" << endl;
    cout << "2. Elixir of Invisibility - Price: 200 gold" << endl;
    cout << "3. Scroll of Fireball - Price: 150 gold" << endl;
    
    cout << "Available gold: " << gold <<endl;
    // Add more item options if needed

    int itemOption;
    cin >> itemOption;

    switch (itemOption) {
        case 1: {
            int itemPrice = 100;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Venom Stick", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Venom Stick purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Venom Stick." << endl;
            }
            break;
        }
        case 2: {
            int itemPrice = 200;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Elixir of Invisibility", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Elixir of Invisibility purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Elixir of Invisibility." << endl;
            }
            break;
        }
        case 3: {
            int itemPrice = 150;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Scroll of Fireball", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Scroll of Fireball purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Scroll of Fireball." << endl;
            }
            break;
        }
        // Add more cases for other item options if needed
        default:
            cout << "Invalid item option." << endl;
            break;
    }
playLevel2();

        case 3:
            cout << "Exiting the game..." << endl;
            exit(0);
        default:
            cout << "Invalid choice. Exiting the game..." << endl;
            exit(0);
    }
}
//}

void Player::playLevel3() {
//	ifstream file("White Dragon.txt");
//        if (file.is_open()) { // Check if the file was successfully opened
//        string line;
//        while (getline(file, line)) { // Read each line of the file
//            cout << line << endl; // Output the line to the console
//        }
//
//        file.close(); // Close the file
//    } else {
//        cout << "Failed to open the file." << endl;
        
    cout << "You have entered Level 3: White Dragon Nest" << endl;
    cout << "Select your option:" << endl;
    cout << "1. Continue" << endl;
    cout << "2. Purchase items" << endl;
    cout << "3. Exit" << endl;
	
	int choice;
    cin >> choice;
    switch (choice) {
        case 1:
            {
                cout << "Continuing to the game..." << endl;
                // Display goblin details
   				 Monster* monster = new Monster("White Dragon", 1, 40);

    			while (true) {                                     
        		printWindowStatus();
        		monster->printMonsterStats();

        		int choice;
       			 cout << "Choose an action:" << endl;
       			 cout << "1. Attack" << endl;
        		 cout << "2. Use Item" << endl;
        		 cout << "3. Retreat" << endl;
    			 cin >> choice;

        		switch (choice) {
            		case 1:
                 		attackMonster(monster);
                		if (monster->getHealth() <= 0) {
                    		cout << "You defeated the White Dragon! Level up!" << endl;
                    		monsterDefeated++;
                    		levelUp();
                    		return;
                		}
                		break;
            		case 2:
               	 		useItem(monster);
                		break;
            		case 3:
                		retreat();
                		return;
            		default:
                		cout << "Invalid option. Please choose again." << endl;
                		break;
        }

        		// Monster attacks player
        		int monsterDamage = rand() % 10 + 1;
        		int playerDamageTaken = monsterDamage - defense;
        		health -= playerDamageTaken;
        		cout << "The White Dragon attacks you! You take " << playerDamageTaken << " damage." << endl;

        		if (health <= 0) {
            		cout << "Game Over! You were defeated by the White Dragon." << endl;
            		return;
        }                                                  
    }
}
	case 2:
    cout << "Entering the item shop..." << endl;
    cout << "Available items:" << endl;
    cout << "1. Venom Stick - Price: 100 gold" << endl;
    cout << "2. Elixir of Invisibility - Price: 200 gold" << endl;
    cout << "3. Scroll of Fireball - Price: 150 gold" << endl;
    
    cout << "Available gold: " << gold <<endl;
    // Add more item options if needed

    int itemOption;
    cin >> itemOption;

    switch (itemOption) {
        case 1: {
            int itemPrice = 100;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Venom Stick", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Venom Stick purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Venom Stick." << endl;
            }
            break;
        }
        case 2: {
            int itemPrice = 200;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Elixir of Invisibility", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Elixir of Invisibility purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Elixir of Invisibility." << endl;
            }
            break;
        }
        case 3: {
            int itemPrice = 150;
            if (gold >= itemPrice) {
                Item* purchasedItem = new Item("Scroll of Fireball", itemPrice); // Replace with actual item creation
                inventory.addItem(purchasedItem);
                gold -= itemPrice;
                cout << "Scroll of Fireball purchased and added to inventory." << endl;
            } else {
                cout << "Insufficient funds to purchase Scroll of Fireball." << endl;
            }
            break;
        }
        // Add more cases for other item options if needed
        default:
            cout << "Invalid item option." << endl;
            break;
    }
playLevel3();

        case 3:
            cout << "Exiting the game..." << endl;
            exit(0);
        default:
            cout << "Invalid choice. Exiting the game..." << endl;
            exit(0);
    }
}
//}



// Monster class implementation
Monster::Monster(string name, int level, int health) {
    this->name = name;
    this->level = level;
    this->health = health;
}

string Monster::getName() {
    return name;
}

void Monster::printMonsterStats() {
    cout << "Monster Statistics" << endl;
    cout << "------------------" << endl;
    cout << "Name: " << name << endl;
    cout << "Level: " << level << endl;
    cout << "Health: " << health << endl;
    cout << "------------------" << endl;
}

void Monster::decreaseHealth(int amount) {
    health -= amount;
}

int Monster::getHealth() {
    return health;
}

// Function prototypes
void displayWelcomeMessage();
void signUp(Player** currentPlayer);
void logIn(Player** currentPlayer);
void enterGame(Player* currentPlayer);
void deletePlayer(Player* currentPlayer);

void displayWelcomeMessage() {
    cout << "Welcome to the Player vs. Monster game!" << endl;
    cout << "**************************************" << endl;
    cout << "Instructions:" << endl;
    cout << "- Sign up or log in to play the game." << endl;
    cout << "- Defeat monsters to level up and earn coins." << endl;
    cout << "- Use coins to buy items from the inventory." << endl;
    cout << "- Good luck and have fun!" << endl;
    cout << "**************************************" << endl;
}

void signUp(Player** currentPlayer) {
    string username, password;
    cout << "************ Sign Up ************" << endl;
    cout << "Enter your username: ";
    cin >> username;
    cout << "Enter your password: ";
    cin >> password;
    *currentPlayer = new Player(username, password);
    (*currentPlayer)->createPlayer();
    cout << "Account created successfully!" << endl;
}

void logIn(Player** currentPlayer) {
    string username, password;
    cout << "************* Log In *************" << endl;
    cout << "Enter your username: ";
    cin >> username;
    cout << "Enter your password: ";
    cin >> password;

    // Check if the player with the given credentials exists
    if ((*currentPlayer)->checkCredentials(username, password)) {
        cout << "Welcome back, " << username << "!" << endl;
    }
    else {
        cout << "Invalid username or password. Please try again." << endl;
        logIn(currentPlayer);
    }
}

void enterGame(Player* currentPlayer) {
    cout << "************** Game **************" << endl;
    cout << "Welcome to the game, " << currentPlayer->username << "!" << endl;
    
//     ifstream file("MainScenario.txt");
//    if (file.is_open()) {
//        string line;
//        while (getline(file, line)) {
//            // Process each line of the file
//            // Here, you can perform actions based on the scenario content
//            // For example, you can display the line or extract specific information from it
//            cout << line << endl;
//        }
//        file.close();
//    } else {
//        cout << "Unable to open the file." << endl;
//    }


    currentPlayer->printWindowStatus();

    // Implement game logic here
    currentPlayer->playLevel1();
    currentPlayer->playLevel2();
    currentPlayer->playLevel3();
}

                                
void deletePlayer(Player* currentPlayer) {
    delete currentPlayer;
}

int main() {

    srand(static_cast<unsigned int>(time(0))); // Seed for random number generation
    displayWelcomeMessage();
    Player* currentPlayer = nullptr;
    signUp(&currentPlayer);
    logIn(&currentPlayer);
    enterGame(currentPlayer);
    deletePlayer(currentPlayer);
    return 0;
}
