#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string>

using namespace std;

// Player structure
struct Player {
    string name;
    int age;
    string gender;
    string role;
    int level;
    int strength;
    int speed;
    int physical;
    int magicPower;
    int statusPoints;
    int health;
    Player* next;
};

// Goblin structure
struct Goblin {
    int level;
    int health;
    int attack;
    int defense;
};

// Function to generate a random role for the player
string getRandomRole() {
    string roles[] = {"Mage", "Warrior", "Hunter", "Tanker", "Priest"};
    int index = rand() % 5;
    return roles[index];
}

// Function to create a new player
Player* createPlayer(const string& name, int age, const string& gender) {
    Player* player = new Player;
    player->name = name;
    player->age = age;
    player->gender = gender;
    player->role = getRandomRole();
    player->level = 1;
    player->strength = 10;
    player->speed = 10;
    player->physical = 10;
    player->magicPower = 10;
    player->statusPoints = 0;
    player->health = 100;
    player->next = nullptr;
    return player;
}

// Function to display player's status
void displayStatus(const Player* player) {
    cout << "Name: " << player->name << endl;
    cout << "Age: " << player->age << endl;
    cout << "Gender: " << player->gender << endl;
    cout << "Role: " << player->role << endl;
    cout << "Level: " << player->level << endl;
    cout << "Strength: " << player->strength << endl;
    cout << "Speed: " << player->speed << endl;
    cout << "Physical: " << player->physical << endl;
    cout << "Magic Power: " << player->magicPower << endl;
    cout << "Status Points: " << player->statusPoints << endl;
    cout << "Health: " << player->health << endl;
}

// Function to create a new goblin
Goblin createGoblin(int level) {
    Goblin goblin;
    goblin.level = level;
    goblin.health = 50 + (level - 1) * 10;
    goblin.attack = 10 + (level - 1) * 2;
    goblin.defense = 5 + (level - 1) * 1;
    return goblin;
}

// Function to simulate a battle between player and goblin
void battle(Player* player, const Goblin& goblin) {
    while (player->health > 0 && goblin.health > 0) {
        // Player attacks goblin
        int playerDamage = player->strength - goblin.defense;
        if (playerDamage < 0) {
            playerDamage = 0;
        }
        goblin.health -= playerDamage;

        // Goblin attacks player
        int goblinDamage = goblin.attack - player->physical;
        if (goblinDamage < 0) {
            goblinDamage = 0;
        }
        player->health -= goblinDamage;

        cout << "Player attacks the Goblin for " << playerDamage << " damage." << endl;
        cout << "The Goblin attacks the player for " << goblinDamage << " damage." << endl;
    }

    if (player->health > 0) {
        cout << "Congratulations! You defeated the Goblin." << endl;
        player->level++;
        player->statusPoints += 2;
        player->health = 100;
    } else {
        cout << "You were defeated by the Goblin. Game over!" << endl;
    }
}

// Function to play the game
void playGame() {
    // Initialize random seed
    srand(time(0));

    string name, gender;
    int age;

    cout << "Enter your name: ";
    cin >> name;

    cout << "Enter your age: ";
    cin >> age;

    cout << "Enter your gender: ";
    cin >> gender;

    Player* player = createPlayer(name, age, gender);

    cout << "Welcome, " << player->name << "! Your adventure begins..." << endl;

    while (player->health > 0) {
        cout << "=== Level " << player->level << " ===" << endl;
        displayStatus(player);

        Goblin goblin = createGoblin(player->level);

        cout << "Prepare to battle a Goblin (Level " << goblin.level << ")!" << endl;

        cout << "Press any key to start the battle...";
        cin.ignore();
        cin.get();

        battle(player, goblin);
        cout << endl;
    }

    // Game over, delete the player
    delete player;
}

// Main function
int main() {
    cout << "=== Text-based Adventure Game ===" << endl;

    playGame();

    return 0;
}
